class Solution {
    private static void bfs(char[][] grid , int[][] vis , int i , int j ){
        vis[i][j] = 1;
        Queue<int[]> q = new LinkedList<>();
        int n = grid.length;
        int m = grid[0].length;
        int[] dRow = {-1, 0, 1, 0};
        int[] dCol = {0, 1, 0, -1};
        q.offer(new int[]{i , j});
        while(!q.isEmpty()){
            int[] curr = q.poll();
            int row = curr[0];
            int col = curr[1];

            for(int k = 0; k < 4; k++){
                int z = row + dRow[k];
                int x = col + dCol[k];

                if(z >= 0 && x >= 0 && z < n && x < m && vis[z][x] == 0 && grid[z][x] == '1'){
                    vis[z][x] = 1 ;
                    q.offer(new int[]{z,x});
                }
            }
        }

    }
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int count = 0;
        int[][] vis = new int[n][m];
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(vis[i][j] == 0 && grid[i][j] == '1'){
                    count++;
                    bfs(grid , vis , i , j );
                }
            }
        }
        return count;
    }
}
